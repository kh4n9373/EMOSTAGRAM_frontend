{"ast":null,"code":"// audio-utils.js\nexport async function blobToAudioBuffer(blob) {\n  const array = await blob.arrayBuffer();\n  const ac = new (window.AudioContext || window.webkitAudioContext)();\n  return await ac.decodeAudioData(array);\n}\nexport function encodeWavFromAudioBuffer(audioBuffer) {\n  const numChan = audioBuffer.numberOfChannels;\n  const sampleRate = audioBuffer.sampleRate;\n  const samples = audioBuffer.length;\n  // interleave to 16-bit PCM\n  let interleaved;\n  if (numChan === 2) {\n    const L = audioBuffer.getChannelData(0);\n    const R = audioBuffer.getChannelData(1);\n    interleaved = new Int16Array(samples * 2);\n    for (let i = 0, j = 0; i < samples; i++, j += 2) {\n      interleaved[j] = Math.max(-1, Math.min(1, L[i])) * 0x7fff;\n      interleaved[j + 1] = Math.max(-1, Math.min(1, R[i])) * 0x7fff;\n    }\n  } else {\n    const M = audioBuffer.getChannelData(0);\n    interleaved = new Int16Array(samples);\n    for (let i = 0; i < samples; i++) {\n      interleaved[i] = Math.max(-1, Math.min(1, M[i])) * 0x7fff;\n    }\n  }\n  const blockAlign = numChan * 16 >> 3;\n  const byteRate = sampleRate * blockAlign;\n  const dataSize = interleaved.byteLength;\n  const buffer = new ArrayBuffer(44 + dataSize);\n  const view = new DataView(buffer);\n  const writeStr = (off, str) => {\n    for (let i = 0; i < str.length; i++) view.setUint8(off + i, str.charCodeAt(i));\n  };\n  let o = 0;\n  writeStr(o, 'RIFF');\n  o += 4;\n  view.setUint32(o, 36 + dataSize, true);\n  o += 4;\n  writeStr(o, 'WAVE');\n  o += 4;\n  writeStr(o, 'fmt ');\n  o += 4;\n  view.setUint32(o, 16, true);\n  o += 4; // PCM chunk size\n  view.setUint16(o, 1, true);\n  o += 2; // PCM\n  view.setUint16(o, numChan, true);\n  o += 2;\n  view.setUint32(o, sampleRate, true);\n  o += 4;\n  view.setUint32(o, byteRate, true);\n  o += 4;\n  view.setUint16(o, blockAlign, true);\n  o += 2;\n  view.setUint16(o, 16, true);\n  o += 2; // bits per sample\n  writeStr(o, 'data');\n  o += 4;\n  view.setUint32(o, dataSize, true);\n  o += 4;\n  new Uint8Array(buffer, 44).set(new Uint8Array(interleaved.buffer));\n  return new Blob([buffer], {\n    type: 'audio/wav'\n  });\n}\nexport function buildPeaks(audioBuffer, buckets = 120) {\n  const ch = audioBuffer.getChannelData(0); // mono for peaks\n  const len = ch.length;\n  const size = Math.floor(len / buckets);\n  const peaks = [];\n  for (let i = 0; i < buckets; i++) {\n    const start = i * size;\n    const end = i === buckets - 1 ? len : (i + 1) * size;\n    let min = 1,\n      max = -1;\n    for (let j = start; j < end; j++) {\n      const v = ch[j];\n      if (v < min) min = v;\n      if (v > max) max = v;\n    }\n    peaks.push({\n      min,\n      max\n    });\n  }\n  return peaks;\n}","map":{"version":3,"names":["blobToAudioBuffer","blob","array","arrayBuffer","ac","window","AudioContext","webkitAudioContext","decodeAudioData","encodeWavFromAudioBuffer","audioBuffer","numChan","numberOfChannels","sampleRate","samples","length","interleaved","L","getChannelData","R","Int16Array","i","j","Math","max","min","M","blockAlign","byteRate","dataSize","byteLength","buffer","ArrayBuffer","view","DataView","writeStr","off","str","setUint8","charCodeAt","o","setUint32","setUint16","Uint8Array","set","Blob","type","buildPeaks","buckets","ch","len","size","floor","peaks","start","end","v","push"],"sources":["/Users/khangtuan/Documents/eq_test/eq_test_frontend_v2/src/components/audio-utils.js"],"sourcesContent":["// audio-utils.js\nexport async function blobToAudioBuffer(blob) {\n    const array = await blob.arrayBuffer()\n    const ac = new (window.AudioContext || window.webkitAudioContext)()\n    return await ac.decodeAudioData(array)\n  }\n  \n  export function encodeWavFromAudioBuffer(audioBuffer) {\n    const numChan = audioBuffer.numberOfChannels\n    const sampleRate = audioBuffer.sampleRate\n    const samples = audioBuffer.length\n    // interleave to 16-bit PCM\n    let interleaved\n    if (numChan === 2) {\n      const L = audioBuffer.getChannelData(0)\n      const R = audioBuffer.getChannelData(1)\n      interleaved = new Int16Array(samples * 2)\n      for (let i = 0, j = 0; i < samples; i++, j += 2) {\n        interleaved[j]   = Math.max(-1, Math.min(1, L[i])) * 0x7fff\n        interleaved[j+1] = Math.max(-1, Math.min(1, R[i])) * 0x7fff\n      }\n    } else {\n      const M = audioBuffer.getChannelData(0)\n      interleaved = new Int16Array(samples)\n      for (let i = 0; i < samples; i++) {\n        interleaved[i] = Math.max(-1, Math.min(1, M[i])) * 0x7fff\n      }\n    }\n  \n    const blockAlign = (numChan * 16) >> 3\n    const byteRate = sampleRate * blockAlign\n    const dataSize = interleaved.byteLength\n    const buffer = new ArrayBuffer(44 + dataSize)\n    const view = new DataView(buffer)\n  \n    const writeStr = (off, str) => { for (let i=0;i<str.length;i++) view.setUint8(off+i, str.charCodeAt(i)) }\n  \n    let o = 0\n    writeStr(o, 'RIFF');                 o += 4\n    view.setUint32(o, 36 + dataSize, true); o += 4\n    writeStr(o, 'WAVE');                 o += 4\n    writeStr(o, 'fmt ');                 o += 4\n    view.setUint32(o, 16, true);           o += 4 // PCM chunk size\n    view.setUint16(o, 1, true);            o += 2 // PCM\n    view.setUint16(o, numChan, true);      o += 2\n    view.setUint32(o, sampleRate, true);   o += 4\n    view.setUint32(o, byteRate, true);     o += 4\n    view.setUint16(o, blockAlign, true);   o += 2\n    view.setUint16(o, 16, true);           o += 2 // bits per sample\n    writeStr(o, 'data');                   o += 4\n    view.setUint32(o, dataSize, true);     o += 4\n  \n    new Uint8Array(buffer, 44).set(new Uint8Array(interleaved.buffer))\n    return new Blob([buffer], { type: 'audio/wav' })\n  }\n  \n  export function buildPeaks(audioBuffer, buckets = 120) {\n    const ch = audioBuffer.getChannelData(0) // mono for peaks\n    const len = ch.length\n    const size = Math.floor(len / buckets)\n    const peaks = []\n    for (let i = 0; i < buckets; i++) {\n      const start = i * size\n      const end = i === buckets - 1 ? len : (i + 1) * size\n      let min = 1, max = -1\n      for (let j = start; j < end; j++) {\n        const v = ch[j]\n        if (v < min) min = v\n        if (v > max) max = v\n      }\n      peaks.push({ min, max })\n    }\n    return peaks\n  }\n  "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}